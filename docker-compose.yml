services:
  db:
    build:
      context: db
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION:-14}
    command: "-c fsync=off -c search_path=midas,${POSTGRES_USER:-postgres},public,postgis"
    ports:
      - 5432:5432
    shm_size: 512mb
    restart: unless-stopped
    env_file:
      - path: ./env_files/db.env
        required: true
    user: ${POSTGRES_USER:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    build:
      args:
        - BASE_IMAGE=${MIGRATE_BASE_IMAGE:-flyway/flyway:10.9.1}
      context: migrate
    restart: on-failure
    env_file:
      - path: ./env_files/migrate.env
        required: true
    command: migrate
    volumes:
      - ./migrate:/flyway/sql
    depends_on:
      db:
        condition: service_healthy

  api:
    build:
      args:
        - GO_VERSION=${GO_VERSION:-1.22}
      context: api
      target: builder
      labels:
        - com.host.description=instrumentation-api
    entrypoint: go run cmd/core/main.go
    restart: unless-stopped
    env_file:
      - path: ./env_files/api.env
        required: true
        # the following env files are only needed for running integration tests
        # since this container is also the target for the test runner (builder target layer)
      - path: ./env_files/dcs-loader.env
        required: true
    ports:
      - "${API_PORT:-8080}:80"
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
      alert:
        condition: service_started
      elasticmq:
        condition: service_started
      report:
        condition: service_started

  telemetry:
    build:
      args:
        - GO_VERSION=${GO_VERSION:-1.22}
      context: api
      target: telemetry
    restart: on-failure
    env_file:
      - path: ./env_files/telemetry.env
        required: true
    ports:
      - "${TELEMETRY_PORT:-9090}:80"
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully

  alert:
    build:
      args:
        - GO_VERSION=${GO_VERSION:-1.22}
      context: api
      target: alert
    env_file:
      - path: ./env_files/alert.env
        required: true
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully

  dcs-loader:
    build:
      args:
        - GO_VERSION=${GO_VERSION:-1.22}
      context: api
      target: dcs-loader
    env_file:
      - path: ./env_files/dcs-loader.env
        required: true
    restart: unless-stopped
    depends_on:
      elasticmq:
        condition: service_started

  report:
    build:
      args:
        - NODE_VERSION=${NODE_VERSION:-22.1}
        - ALPINE_VERSION=${ALPINE_VERSION:-3.19}
      context: report
      network: host
    env_file:
      - path: ./env_files/report.env
        required: true
    depends_on:
      elasticmq:
        condition: service_started
    security_opt:
      - 'seccomp:./report/chrome.json'

  elasticmq:
    image: softwaremill/elasticmq
    volumes:
      - ./elasticmq.conf:/opt/elasticmq.conf
    restart: unless-stopped

  minio:
    image: minio/minio
    env_file:
      - path: ./env_files/minio.env
        required: true
    command: server /data
    profiles:
      - local

  # configure minio on startup (create buckets, etc)
  # inspired by https://github.com/minio/minio/issues/4769
  # and         https://gist.github.com/haxoza/22afe7cc4a9da7e8bdc09aad393a99cc
  minio_init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_started
    entrypoint: >
      /bin/sh -c "
      echo 'sleeping for 10 seconds while minio starts...';
      sleep 10;
      /usr/bin/mc config host add minio http://minio:9000 AKIAIOSFODNN7EXAMPLE wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY;
      /usr/bin/mc mb minio/corpsmap-data-incoming minio/corpsmap-data;
      /usr/bin/mc policy set public minio/corpsmap-data;
      /usr/bin/mc cp --recursive /media/projects/ minio/corpsmap-data/instrumentation/projects/ ;
      exit 0;
      "
    volumes:
      - ./data:/media
    profiles:
      - local

  mock_datalogger:
    build:
      context: mock/telemetry
    restart: unless-stopped
    profiles:
      - mock
    depends_on:
      telemetry:
        condition: service_started
