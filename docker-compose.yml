version: '3.9'

services:
  postgres:
    image: postgis/postgis:${POSTGIS_VERSION:-13-3.1}
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    user: ${POSTGRES_USER:-postgres}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: api
      labels:
        - com.host.description=instrumentation-api
    restart: always
    environment:
      # NOTE: AWS_ Variables provided by execution role in deployed version
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-AKIAIOSFODNN7EXAMPLE}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
      - INSTRUMENTATION_APPLICATION_KEY=${INSTRUMENTATION_APPLICATION_KEY:-appkey}
      - INSTRUMENTATION_AUTH_DISABLED=${INSTRUMENTATION_AUTH_DISABLED:-False}
      - INSTRUMENTATION_AUTH_JWT_MOCKED=${INSTRUMENTATION_AUTH_JWT_MOCKED:-True}
      - INSTRUMENTATION_AWS_S3_REGION=${INSTRUMENTATION_AWS_S3_REGION:-us-east-1}
      - INSTRUMENTATION_AWS_S3_BUCKET=${INSTRUMENTATION_AWS_S3_BUCKET:-corpsmap-data}
      - INSTRUMENTATION_AWS_S3_ENDPOINT=${INSTRUMENTATION_AWS_S3_ENDPOINT:-http://minio:9000}
      - INSTRUMENTATION_AWS_S3_DISABLE_SSL=${INSTRUMENTATION_AWS_S3_DISABLE_SSL:-True}
      - INSTRUMENTATION_AWS_S3_FORCE_PATH_STYLE=${INSTRUMENTATION_AWS_S3_FORCE_PATH_STYLE:-True}
      - INSTRUMENTATION_LAMBDACONTEXT=${INSTRUMENTATION_LAMBDACONTEXT:-false}
      - INSTRUMENTATION_DBUSER=${INSTRUMENTATION_DBUSER:-instrumentation_user}
      - INSTRUMENTATION_DBPASS=${INSTRUMENTATION_DBPASS:-password}
      - INSTRUMENTATION_DBNAME=${INSTRUMENTATION_DBNAME:-postgres}
      - INSTRUMENTATION_DBHOST=${INSTRUMENTATION_DBHOST:-postgres}
      - INSTRUMENTATION_DBSSLMODE=${INSTRUMENTATION_DBSSLMODE:-disable}
      - INSTRUMENTATION_HEARTBEATKEY=${INSTRUMENTATION_HEARTBEATKEY:-password}
      - INSTRUMENTATION_ROUTE_PREFIX=${INSTRUMENTATION_ROUTE_PREFIX:-}
    ports:
      - '${API_PORT:-80}:80'
    depends_on:
      postgres:
        condition: service_healthy
      flyway:
        condition: service_completed_successfully

  flyway:
    build:
      context: sql
    restart: on-failure
    environment:
      - FLYWAY_LOCATIONS=${FLYWAY_LOCATIONS:-filesystem:/flyway/sql/common,filesystem:/flyway/sql/local}
      - FLYWAY_USER=postgres
      - FLYWAY_PASSWORD=postgres
      - FLYWAY_URL=jdbc:postgresql://postgres:5432/postgres
    command: migrate
    volumes:
      - ./sql:/flyway/sql
    depends_on:
      postgres:
        condition: service_healthy

  # ---------------------- local profile services ---------------------- #

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-postgres@postgres.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-postgres}
    ports:
      - '${PGADMIN_PORT:-8081}:80'
    profiles:
      - local

  minio:
    image: minio/minio
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-AKIAIOSFODNN7EXAMPLE}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY}
    command: server /data
    profiles:
      - local

  # configure minio on startup (create buckets, etc)
  # inspired by https://github.com/minio/minio/issues/4769
  # and         https://gist.github.com/haxoza/22afe7cc4a9da7e8bdc09aad393a99cc
  minio_init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_started
    entrypoint: >
      /bin/sh -c "
      echo 'sleeping for 10 seconds while minio starts...';
      sleep 10;
      /usr/bin/mc config host add minio http://minio:9000 ${MINIO_ACCESS_KEY:-AKIAIOSFODNN7EXAMPLE} ${MINIO_SECRET_KEY:-wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY};
      /usr/bin/mc mb   minio/corpsmap-data-incoming   minio/corpsmap-data;
      /usr/bin/mc policy set public minio/corpsmap-data;
      /usr/bin/mc cp --recursive /media/projects/ minio/corpsmap-data/instrumentation/projects/ ;
      exit 0;
      "
    volumes:
      - ./data:/media
    profiles:
      - local

  swagger:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    environment:
      - API_URL=swagger/apidoc.json
      - CONFIG_URL=swagger/swagger-config.json
    ports:
      - '${INSTRUMENTATION_SWAGGER_PORT:-8002}:8080'
    volumes:
      - ${INSTRUMENTATION_SWAGGER_APIDOC_VOLUME:-./docs/swagger}:/usr/share/nginx/html/swagger
    restart: always
    profiles:
      - local

  swagger_init:
    image: node:current-alpine
    container_name: swagger_init
    ports:
      - '${INSTRUMENTATION_SWAGGER_INIT_PORT:-8003}:8080'
    volumes:
      - ${INSTRUMENTATION_SWAGGER_APIDOC_VOLUME:-./docs/swagger}:/docs/swagger
      - ${INSTRUMENTATION_SWAGGER_TESTS_VOLUME:-./tests}:/tests
    entrypoint: ["/bin/sh", "/docs/swagger/postman2apidoc.sh"]
    profiles:
      - local
