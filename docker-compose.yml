version: '3'

services:
  postgres:
    image: mdillon/postgis
    volumes:
      - ./database/sql:/sql
      - ./database/sql/init.sql:/docker-entrypoint-initdb.d/z_init.sql
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  api:
    build:
      context: ./
    restart: always
    environment:
      # NOTE: AWS_ Variables provided by execution role in deployed version
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - INSTRUMENTATION_APPLICATION_KEY=${INSTRUMENTATION_APPLICATION_KEY}
      - INSTRUMENTATION_AUTH_DISABLED=${INSTRUMENTATION_AUTH_DISABLED}
      - INSTRUMENTATION_AUTH_JWT_MOCKED=${INSTRUMENTATION_AUTH_JWT_MOCKED}
      - INSTRUMENTATION_AWS_S3_REGION=${INSTRUMENTATION_AWS_S3_REGION}
      - INSTRUMENTATION_AWS_S3_BUCKET=${INSTRUMENTATION_AWS_S3_BUCKET}
      - INSTRUMENTATION_AWS_S3_ENDPOINT=${INSTRUMENTATION_AWS_S3_ENDPOINT}
      - INSTRUMENTATION_AWS_S3_DISABLE_SSL=${INSTRUMENTATION_AWS_S3_DISABLE_SSL}
      - INSTRUMENTATION_AWS_S3_FORCE_PATH_STYLE=${INSTRUMENTATION_AWS_S3_FORCE_PATH_STYLE}
      - INSTRUMENTATION_LAMBDACONTEXT=${INSTRUMENTATION_LAMBDACONTEXT}
      - INSTRUMENTATION_DBUSER=${INSTRUMENTATION_DBUSER}
      - INSTRUMENTATION_DBPASS=${INSTRUMENTATION_DBPASS}
      - INSTRUMENTATION_DBNAME=${INSTRUMENTATION_DBNAME}
      - INSTRUMENTATION_DBHOST=${INSTRUMENTATION_DBHOST}
      - INSTRUMENTATION_DBSSLMODE=${INSTRUMENTATION_DBSSLMODE}
      - INSTRUMENTATION_HEARTBEATKEY=${INSTRUMENTATION_HEARTBEATKEY}
      - INSTRUMENTATION_ROUTE_PREFIX${INSTRUMENTATION_ROUTE_PREFIX}
    ports:
      - '${API_PORT}:80'
  minio:
    image: minio/minio
    environment:
      - MINIO_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
      - MINIO_SECRET_KEY=${AWS_SECRET_ACCESS_KEY}
    command: server /data
  # configure minio on startup (create buckets, etc)
  # inspired by https://github.com/minio/minio/issues/4769
  # and         https://gist.github.com/haxoza/22afe7cc4a9da7e8bdc09aad393a99cc
  minio_init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      echo 'sleeping for 10 seconds while minio starts...';
      sleep 10;
      /usr/bin/mc config host add minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      /usr/bin/mc mb   minio/corpsmap-data-incoming   minio/corpsmap-data;
      /usr/bin/mc policy set public minio/corpsmap-data;
      /usr/bin/mc cp --recursive /media/projects/ minio/corpsmap-data/instrumentation/projects/ ;
      exit 0;
      "
    volumes:
      - ./data:/media
  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - '${PGADMIN_PORT}:80'
  # Seed data using container was required as the sql file was so large
  # that it caused the postgres init to hang and exit early.
  seed_data:
    image: python:3
    depends_on:
      - api
      - postgres
    volumes:
      - ./_utils/seed_measurements:/app
    environment:
      - INSTRUMENTATION_API_HOST=${INSTRUMENTATION_API_HOST}
      - INSTRUMENTATION_DBUSER=${INSTRUMENTATION_DBUSER}
      - INSTRUMENTATION_DBPASS=${INSTRUMENTATION_DBPASS}
      - INSTRUMENTATION_DBNAME=${INSTRUMENTATION_DBNAME}
      - INSTRUMENTATION_DBHOST=${INSTRUMENTATION_DBHOST}
      - INSTRUMENTATION_ROUTE_PREFIX${INSTRUMENTATION_ROUTE_PREFIX}
    entrypoint: >
      /bin/sh -c "
      pip3 install requests psycopg2;
      sleep 10;
      python3 /app/generate_seed_measurements.py
      exit 0;
      "
