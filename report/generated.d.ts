/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/alert_configs/{alert_config_id}/submittals": {
    /** lists all submittals for an instrument */
    get: {
      parameters: {
        path: {
          /** @description alert config uuid */
          alert_config_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Submittal"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/alert_configs/{alert_config_id}/submittals/verify_missing": {
    /** verifies all current submittals for the alert config are "missing" and will not be completed */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description alert config uuid */
          alert_config_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/alert_subscriptions/{alert_subscription_id}": {
    /** updates settings for an alert subscription */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description alert subscription id */
          alert_subscription_id: string;
        };
      };
      /** @description alert subscription payload */
      requestBody: {
        content: {
          "application/json": components["schemas"]["AlertSubscription"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertSubscription"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/aware/data_acquisition_config": {
    /** lists alert configs for a project */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AwarePlatformParameterConfig"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/aware/parameters": {
    /** lists alert configs for a project */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AwareParameter"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/datalogger": {
    /** creates a datalogger */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
      };
      /** @description datalogger payload */
      requestBody: {
        content: {
          "application/json": components["schemas"]["Datalogger"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["DataloggerWithKey"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/datalogger/{datalogger_id}": {
    /** gets a datalogger by id */
    get: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Datalogger"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates a datalogger */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
        };
      };
      /** @description datalogger payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["Datalogger"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Datalogger"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes a datalogger by id */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/datalogger/{datalogger_id}/equivalency_table": {
    /** creates an equivalency table for a datalogger and auto create data logger table if not exists */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
        };
      };
      /** @description equivalency table payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["EquivalencyTable"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EquivalencyTable"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/datalogger/{datalogger_id}/key": {
    /** deletes and recreates a datalogger api key */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["DataloggerWithKey"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/datalogger/{datalogger_id}/tables/{datalogger_table_id}/equivalency_table": {
    /** gets an equivalency table for a datalogger */
    get: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
          /** @description datalogger table uuid */
          datalogger_table_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EquivalencyTable"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates an equivalency table for a datalogger */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
          /** @description datalogger table uuid */
          datalogger_table_id: string;
        };
      };
      /** @description equivalency table payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["EquivalencyTable"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EquivalencyTable"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** creates an equivalency table for a datalogger and auto create data logger table if not exists */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
          /** @description datalogger table uuid */
          datalogger_table_id: string;
        };
      };
      /** @description equivalency table payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["EquivalencyTable"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EquivalencyTable"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes an equivalency table and corresponding datalogger table */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
          /** @description datalogger table uuid */
          datalogger_table_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/datalogger/{datalogger_id}/tables/{datalogger_table_id}/equivalency_table/row/{row_id}": {
    /** deletes an equivalency table row */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
          /** @description datalogger table uuid */
          datalogger_table_id: string;
          /** @description equivalency table row uuid */
          row_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/datalogger/{datalogger_id}/tables/{datalogger_table_id}/name": {
    /** resets a datalogger table name to be renamed by incoming telemetry */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
          /** @description datalogger table uuid */
          datalogger_table_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["DataloggerTablePreview"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/datalogger/{datalogger_id}/tables/{datalogger_table_id}/preview": {
    /** gets the most recent datalogger preview by by datalogger id */
    get: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description datalogger uuid */
          datalogger_id: string;
          /** @description datalogger table uuid */
          datalogger_table_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["DataloggerTablePreview"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/dataloggers": {
    /** lists dataloggers for a project */
    get: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Datalogger"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/districts": {
    /** lists all districts */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["District"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/domains": {
    /** lists all domains */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Domain"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/domains/map": {
    /** Get map with domain group as key */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["DomainMap"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/email_autocomplete": {
    /** lists results of email autocomplete */
    get: {
      parameters: {
        query: {
          /** @description search query string */
          q: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["EmailAutocompleteResult"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/explorer": {
    /** list timeseries measurements for explorer page */
    post: {
      /** @description array of instrument uuids */
      requestBody: {
        content: {
          "application/json": string[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
                [key: string]: components["schemas"]["MeasurementCollectionLean"];
              }[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/formulas": {
    /** lists calculations associated with an instrument */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["CalculatedTimeseries"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** creates a calculation */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/formulas/{formula_id}": {
    /** updates a calculation */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description formula uuid */
          formula_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["CalculatedTimeseries"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes a calculation */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description formula uuid */
          formula_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/health": {
    /** checks the health of the api server */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
                [key: string]: unknown;
              }[];
          };
        };
      };
    };
  };
  "/heartbeat": {
    /** creates a heartbeat entry at regular intervals */
    post: {
      parameters: {
        query: {
          /** @description api key */
          key: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Heartbeat"];
          };
        };
      };
    };
  };
  "/heartbeat/latest": {
    /** gets the latest heartbeat */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Heartbeat"];
          };
        };
      };
    };
  };
  "/heartbeats": {
    /** returns all heartbeats */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Heartbeat"][];
          };
        };
      };
    };
  };
  "/home": {
    /** gets information for the homepage */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Home"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/inclinometer_explorer": {
    /** list inclinometer timeseries measurements for explorer page */
    post: {
      /** @description array of inclinometer instrument uuids */
      requestBody: {
        content: {
          "application/json": string[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
                [key: string]: components["schemas"]["InclinometerMeasurementCollectionLean"];
              }[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instrument_groups": {
    /** lists all instrument groups */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentGroup"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** creats an instrument group from an array of instruments */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
      };
      /** @description instrument group payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["InstrumentGroup"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["InstrumentGroup"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instrument_groups/{instrument_group_id}": {
    /** gets a single instrument group */
    get: {
      parameters: {
        path: {
          /** @description instrument group uuid */
          instrument_group_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentGroup"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates an existing instrument group */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description instrument group uuid */
          instrument_group_id: string;
        };
      };
      /** @description instrument group payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["InstrumentGroup"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentGroup"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** soft deletes an instrument */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description instrument group uuid */
          instrument_group_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentGroup"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instrument_groups/{instrument_group_id}/instruments": {
    /** lists instruments in an instrument group */
    get: {
      parameters: {
        path: {
          /** @description instrument group uuid */
          instrument_group_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Instrument"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** adds an instrument to an instrument group */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description instrument group uuid */
          instrument_group_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instrument_groups/{instrument_group_id}/instruments/{instrument_id}": {
    /** removes an instrument from an instrument group */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description instrument group uuid */
          instrument_group_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instrument_groups/{instrument_group_id}/timeseries": {
    /** lists timeseries for instruments in an instrument group */
    get: {
      parameters: {
        path: {
          /** @description instrument group uuid */
          instrument_group_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Timeseries"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instrument_groups/{instrument_group_id}/timeseries_measurements": {
    /** lists timeseries measurements by instrument group id */
    get: {
      parameters: {
        path: {
          /** @description instrument group uuid */
          instrument_group_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["MeasurementCollection"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments": {
    /** lists all instruments */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Instrument"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/count": {
    /** gets the total number of non deleted instruments in the system */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentCount"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/ipi/{instrument_id}/measurements": {
    /** creates instrument notes */
    get: {
      parameters: {
        query: {
          /** @description after time */
          after?: string;
          /** @description before time */
          before: string;
        };
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["IpiMeasurements"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/ipi/{instrument_id}/segments": {
    /** gets all ipi segments for an instrument */
    get: {
      parameters: {
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["IpiSegment"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates multiple segments for an ipi instrument */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      /** @description ipi instrument segments payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["IpiSegment"][];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["IpiSegment"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/notes": {
    /** gets all instrument notes */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentNote"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** creates instrument notes */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
      };
      /** @description instrument note collection payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["InstrumentNoteCollection"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentNote"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/notes/{note_id}": {
    /** gets a single instrument note by id */
    get: {
      parameters: {
        path: {
          /** @description note uuid */
          note_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentNote"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates an instrument note by id */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description note uuid */
          note_id: string;
        };
      };
      /** @description instrument note collection payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["InstrumentNote"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertConfig"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/saa/{instrument_id}/measurements": {
    /** creates instrument notes */
    get: {
      parameters: {
        query: {
          /** @description after time */
          after?: string;
          /** @description before time */
          before: string;
        };
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SaaMeasurements"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/saa/{instrument_id}/segments": {
    /** gets all saa segments for an instrument */
    get: {
      parameters: {
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SaaSegment"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates multiple segments for an saa instrument */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      /** @description saa instrument segments payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["SaaSegment"][];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SaaSegment"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/{instrument_id}": {
    /** gets a single instrument by id */
    get: {
      parameters: {
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Instrument"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/{instrument_id}/notes": {
    /** gets instrument notes for a single instrument */
    get: {
      parameters: {
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentNote"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/{instrument_id}/notes/{note_id}": {
    /** deletes an instrument note */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description instrument uuid */
          instrument_id: string;
          /** @description note uuid */
          note_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/{instrument_id}/status": {
    /** lists all Status for an instrument */
    get: {
      parameters: {
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentStatus"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** creates a status for an instrument */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      /** @description instrument status collection paylaod */
      requestBody: {
        content: {
          "*/*": components["schemas"]["InstrumentStatusCollection"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/{instrument_id}/status/{status_id}": {
    /** gets a single status */
    get: {
      parameters: {
        path: {
          /** @description instrument uuid */
          instrument_id: string;
          /** @description status uuid */
          status_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertConfig"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes a status for an instrument */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description instrument uuid */
          instrument_id: string;
          /** @description project uuid */
          status_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/{instrument_id}/submittals": {
    /** lists all submittals for an instrument */
    get: {
      parameters: {
        query?: {
          /** @description filter by missing projects only */
          missing?: boolean;
        };
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Submittal"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/{instrument_id}/timeseries/{timeseries_id}": {
    /** gets a single timeseries by id */
    get: {
      parameters: {
        path: {
          /** @description timeseries uuid */
          timeseries_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Timeseries"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/{instrument_id}/timeseries/{timeseries_id}/measurements": {
    /** lists timeseries by timeseries uuid */
    get: {
      parameters: {
        query?: {
          /** @description after time */
          after?: string;
          /** @description before time */
          before?: string;
          /** @description downsample threshold */
          threshold?: number;
        };
        path: {
          /** @description instrument uuid */
          instrument_id: string;
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["MeasurementCollection"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/instruments/{instrument_id}/timeseries_measurements": {
    /** lists timeseries measurements by instrument id */
    get: {
      parameters: {
        query?: {
          /** @description after time */
          after?: string;
          /** @description before time */
          before?: string;
          /** @description downsample threshold */
          threshold?: number;
        };
        path: {
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["MeasurementCollection"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/my_alert_subscriptions": {
    /** lists all alerts subscribed to by the current profile */
    get: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertSubscription"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/my_alerts": {
    /**
     * lists subscribed alerts for a single user
     * @description list all alerts a profile is subscribed to
     */
    get: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Alert"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/my_alerts/{alert_id}/read": {
    /**
     * marks an alert as read
     * @description marks an alert as read for a profile
     * returning the updated alert
     */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description alert uuid */
          alert_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Alert"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/my_alerts/{alert_id}/unread": {
    /**
     * marks an alert as unread for a profile
     * @description marks an alert as unread based on provided profile ID and alert ID.
     * returning the updated alert
     */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description alert uuid */
          alert_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Alert"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/my_profile": {
    /** gets profile for current authenticated user */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Profile"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/my_projects": {
    /** lists projects where current profile is an admin or member with optional filter by project role */
    get: {
      parameters: {
        query?: {
          /** @description role */
          role?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Project"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/my_tokens": {
    /** creates token for a profile */
    post: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Token"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/my_tokens/{token_id}": {
    /** deletes a token for a profile */
    delete: {
      parameters: {
        path: {
          /** @description token uuid */
          token_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/opendcs/sites": {
    /** lists all instruments, represented as opendcs sites */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "text/xml": components["schemas"]["Site"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "text/xml": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "text/xml": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "text/xml": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/profiles": {
    /** creates a user profile */
    post: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Profile"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects": {
    /** lists all projects optionally filtered by federal id */
    get: {
      parameters: {
        query?: {
          /** @description federal id */
          federal_id?: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Project"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** accepts an array of instruments for bulk upload to the database */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
      };
      /** @description project collection payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["Project"][];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["IDSlugName"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/count": {
    /** gets the total number of non-deleted projects in the system */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectCount"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}": {
    /** gets a single project */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Project"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates an existing project */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description project payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["Project"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Project"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** soft deletes a project */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project id */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/alert_configs": {
    /** lists alert configs for a project */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertConfig"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** creates one alert config */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description alert config payload */
      requestBody: {
        content: {
          "application/json": components["schemas"]["AlertConfig"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/alert_configs/{alert_config_id}": {
    /** gets a single alert */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description alert config uuid */
          alert_config_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates an existing alert config */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description alert config uuid */
          alert_config_id: string;
        };
      };
      /** @description alert config payload */
      requestBody: {
        content: {
          "application/json": components["schemas"]["AlertConfig"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertConfig"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes an alert config */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description Project ID */
          project_id: string;
          /** @description instrument uuid */
          alert_config_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertConfig"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/collection_groups": {
    /** lists instrument groups */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertConfig"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /**
     * creates a new collection group
     * @description lists alert configs for a single project optionally filtered by alert_type_id
     */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description collection group payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["CollectionGroup"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["CollectionGroup"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/collection_groups/{collection_group_id}": {
    /** gets all data needed to render collection group form */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description collection group uuid */
          collection_group_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["CollectionGroupDetails"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates an existing collection group */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description collection group uuid */
          collection_group_id: string;
        };
      };
      /** @description collection group payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["CollectionGroup"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["CollectionGroup"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes a collection group using the id of the collection group */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description collection group uuid */
          collection_group_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/collection_groups/{collection_group_id}/timeseries/{timeseries_id}": {
    /** adds a timeseries to a collection group */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description collection group uuid */
          collection_group_id: string;
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** removes a timeseries from a collection group */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description collection group uuid */
          collection_group_id: string;
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/district_rollup/evaluation_submittals": {
    /** lists monthly evaluation statistics for a district by project id */
    get: {
      parameters: {
        path: {
          /** @description project id */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["DistrictRollup"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/district_rollup/measurement_submittals": {
    /** lists monthly measurement statistics for a district by project id */
    get: {
      parameters: {
        path: {
          /** @description project id */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["DistrictRollup"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/evaluations": {
    /** lists evaluations for a single project optionally filtered by alert_config_id */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Evaluation"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** creates one evaluation */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description evaluation payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["Evaluation"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Evaluation"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/evaluations/{evaluation_id}": {
    /** gets a single evaluation by id */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description evaluation uuid */
          evaluation_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Evaluation"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates an existing evaluation */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description evaluation uuid */
          evaluation_id: string;
        };
      };
      /** @description evaluation payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["Evaluation"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Evaluation"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes an evaluation */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description evaluation uuid */
          evaluation_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertConfig"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/images": {
    /** uploades a picture for a project */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project id */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/inclinometer_measurements": {
    /** creates or updates one or more inclinometer measurements */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description inclinometer measurement collections */
      requestBody: {
        content: {
          "*/*": components["schemas"]["InclinometerMeasurementCollectionCollection"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InclinometerMeasurementCollection"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instrument_groups": {
    /** lists instrument groups associated with a project */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentGroup"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments": {
    /** lists instruments associated with a project */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Project"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** accepts an array of instruments for bulk upload to the database */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project id */
          project_id: string;
          /** @description instrument id */
          instrument_id: string;
        };
      };
      /** @description instrument collection payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["Instrument"][];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["IDSlugName"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/assignments": {
    /**
     * updates multiple instrument assigments for a project
     * @description must be Project (or Application) Admin of all existing instrument projects and project to be assigned
     */
    put: {
      parameters: {
        query: {
          /** @description valid values are 'assign' or 'unassign' */
          action: string;
          /** @description validate request without performing action */
          dry_run?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description instrument uuids */
      requestBody: {
        content: {
          "*/*": components["schemas"]["ProjectInstrumentAssignments"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentsValidation"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}": {
    /** updates an existing instrument */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      /** @description instrument payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["Instrument"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Instrument"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** soft deletes an instrument */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/alert_configs": {
    /** lists alerts for a single instrument */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertConfig"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/alert_configs/{alert_config_id}/subscribe": {
    /** subscribes a profile to an alert */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
          /** @description alert config uuid */
          alert_config_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AlertSubscription"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/alert_configs/{alert_config_id}/unsubscribe": {
    /** unsubscribes a profile to an alert */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
          /** @description alert config uuid */
          alert_config_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/alerts": {
    /**
     * lists alerts for a single instrument
     * @description list all alerts associated an instrument
     */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Alert"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/assignments": {
    /**
     * updates multiple project assignments for an instrument
     * @description must be Project (or Application) Admin of all existing instrument projects and project to be assigned
     */
    put: {
      parameters: {
        query: {
          /** @description valid values are 'assign' or 'unassign' */
          action: string;
          /** @description validate request without performing action */
          dry_run?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      /** @description project uuids */
      requestBody: {
        content: {
          "*/*": components["schemas"]["InstrumentProjectAssignments"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentsValidation"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /**
     * assigns an instrument to a project.
     * @description must be Project (or Application) Admin of all existing instrument projects and project to be assigned
     */
    post: {
      parameters: {
        query?: {
          /** @description validate request without performing action */
          dry_run?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentsValidation"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /**
     * unassigns an instrument from a project.
     * @description must be Project Admin of project to be unassigned
     */
    delete: {
      parameters: {
        query: {
          /** @description valid values are 'assign' or 'unassign' */
          action: string;
          /** @description validate request without performing action */
          dry_run?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InstrumentsValidation"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/constants": {
    /** lists constants for a given instrument */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Timeseries"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** creates instrument constants (i.e. timeseries) */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      /** @description timeseries collection items payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["TimeseriesCollectionItems"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Timeseries"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/constants/{timeseries_id}": {
    /** removes a timeseries as an instrument constant */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/evaluations": {
    /** lists evaluations for a single instrument */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Evaluation"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/geometry": {
    /** updates the geometry of an instrument */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      /** @description instrument payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["Instrument"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Instrument"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/timeseries": {
    /** lists timeseries for an instrument */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Timeseries"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/timeseries/cwms": {
    /** lists cwms timeseries for an instrument */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["TimeseriesCwms"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** creates cwms timeseries */
    post: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
        };
      };
      /** @description array of cwms timeseries to create */
      requestBody: {
        content: {
          "*/*": components["schemas"]["TimeseriesCwms"][];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["TimeseriesCwms"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/instruments/{instrument_id}/timeseries/cwms/{timeseries_id}": {
    /** updates cwms timeseries */
    put: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description instrument uuid */
          instrument_id: string;
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      /** @description cwms timeseries to update */
      requestBody: {
        content: {
          "*/*": components["schemas"]["TimeseriesCwms"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["TimeseriesCwms"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/members": {
    /** lists project members and their role information */
    get: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectMembership"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/members/{profile_id}/roles/{role_id}": {
    /** adds project members and their role information */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description profile uuid */
          profile_id: string;
          /** @description role uuid */
          role_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ProjectMembership"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** removes project members and their role information */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description profile uuid */
          profile_id: string;
          /** @description role uuid */
          role_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs": {
    /** lists plot configs */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/bullseye_plots": {
    /** adds a bullseye plot configuration to a project */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description plot config payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["PlotConfigBullseyePlot"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/bullseye_plots/{plot_configuration_id}": {
    /** updates a bullseye plot configuration in a project */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      /** @description plot config payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["PlotConfigBullseyePlot"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/bullseye_plots/{plot_configuration_id}/measurements": {
    /** lists plot config measurements for a bullseye plot */
    get: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfigMeasurementBullseyePlot"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/contour_plots": {
    /** adds a plot configuration to a project */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description plot config payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["PlotConfigContourPlot"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/contour_plots/{plot_configuration_id}": {
    /** updates a plot configuration in a project */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      /** @description plot config payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["PlotConfigContourPlot"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/contour_plots/{plot_configuration_id}/measurements": {
    /** gets plot config measurements for a contour plot at the specified time */
    get: {
      parameters: {
        query: {
          /** @description time */
          time: string;
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["AggregatePlotConfigMeasurementsContourPlot"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/contour_plots/{plot_configuration_id}/times": {
    /** lists time parameters available for measurement qeries for a contour plot */
    get: {
      parameters: {
        query?: {
          /** @description after timestamp */
          after?: string;
          /** @description before timestamp */
          before?: string;
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": string[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/profile_plots": {
    /** adds a profile plot configuration to a project */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description plot config payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["PlotConfigProfilePlot"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/profile_plots/{plot_configuration_id}": {
    /** updates a profile plot configuration in a project */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      /** @description plot config payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["PlotConfigProfilePlot"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/scatter_line_plots": {
    /** adds a scatter-line plot configuration to a project */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description plot config payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["PlotConfigScatterLinePlot"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/scatter_line_plots/{plot_configuration_id}": {
    /** updates a scatter-line plot configuration in a project */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      /** @description plot config payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["PlotConfigScatterLinePlot"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configs/{plot_configuration_id}": {
    /** gets a single plot configuration by id */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes a plot configuration in a project */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configurations": {
    /** lists plot configs */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** adds a scatter-line plot configuration to a project */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description plot config payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["PlotConfigScatterLinePlot"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/plot_configurations/{plot_configuration_id}": {
    /** gets a single plot configuration by id */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates a scatter-line plot configuration in a project */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      /** @description plot config payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["PlotConfigScatterLinePlot"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["PlotConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes a plot configuration in a project */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description plot config uuid */
          plot_configuration_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/report_configs": {
    /** lists all report configs for a project */
    get: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ReportConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** creates a report config */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description report config payload */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ReportConfig"];
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["ReportConfig"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/report_configs/{report_config_id}": {
    /** updates a report config */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description report config uuid */
          report_config_id: string;
        };
      };
      /** @description report config payload */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ReportConfig"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates a report config */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description report config uuid */
          report_config_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/report_configs/{report_config_id}/jobs": {
    /** starts a job to create a pdf report */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description report config uuid */
          report_config_id: string;
        };
      };
      responses: {
        /** @description Created */
        201: {
          content: {
            "application/json": components["schemas"]["ReportDownloadJob"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/report_configs/{report_config_id}/jobs/{job_id}": {
    /** gets a job that creates a pdf report */
    get: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description report config uuid */
          report_config_id: string;
          /** @description download job uuid */
          job_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ReportDownloadJob"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/report_configs/{report_config_id}/jobs/{job_id}/downloads": {
    /** downloads a report for a given report job id */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
          /** @description report config uuid */
          report_config_id: string;
          /** @description job uuid */
          job_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/pdf": string;
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/pdf": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/pdf": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/pdf": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/submittals": {
    /** lists all submittals for a project */
    get: {
      parameters: {
        query?: {
          /** @description filter by missing projects only */
          missing?: boolean;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Submittal"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/timeseries": {
    /** lists all timeseries for a single project */
    get: {
      parameters: {
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Timeseries"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_id}/timeseries_measurements": {
    /** overwrites all measurements witin date range with the supplied payload */
    put: {
      parameters: {
        query?: {
          /** @description after timestamp */
          after?: string;
          /** @description before timestamp */
          before?: string;
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description array of timeseries measurement collections */
      requestBody: {
        content: {
          "*/*": components["schemas"]["TimeseriesMeasurementCollectionCollection"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["MeasurementCollection"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** creates or updates one or more timeseries measurements */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description project uuid */
          project_id: string;
        };
      };
      /** @description array of timeseries measurement collections */
      requestBody: {
        content: {
          "application/json": components["schemas"]["TimeseriesMeasurementCollectionCollection"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["MeasurementCollection"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/projects/{project_slug}/images/{uri_path}": {
    /** serves media, files, etc for a given project */
    get: {
      parameters: {
        path: {
          /** @description project abbr */
          project_slug: string;
          /** @description uri path of requested resource */
          uri_path: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "image/jpeg": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "image/jpeg": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "image/jpeg": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/report_configs/{report_config_id}/plot_configs": {
    /** Lists all plot configs for a report config */
    get: {
      parameters: {
        query: {
          /** @description api key */
          key: string;
        };
        path: {
          /** @description report config uuid */
          report_config_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["ReportConfigWithPlotConfigs"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/report_jobs/{job_id}": {
    /** updates a job that creates a pdf report */
    put: {
      parameters: {
        query: {
          /** @description api key */
          key: string;
        };
        path: {
          /** @description download job uuid */
          job_id: string;
        };
      };
      /** @description report download job payload */
      requestBody: {
        content: {
          "application/json": components["schemas"]["ReportDownloadJob"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/search/{entity}": {
    /** allows searching using a string on different entities */
    get: {
      parameters: {
        query?: {
          /** @description search string */
          q?: string;
        };
        path: {
          /** @description entity to search (i.e. projects, etc.) */
          entity: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["SearchResult"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/submittals/{submittal_id}/verify_missing": {
    /** verifies the specified submittal is "missing" and will not be completed */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description submittal uuid */
          submittal_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/timeseries": {
    /** creates one or more timeseries */
    post: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
      };
      /** @description timeseries collection items payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["TimeseriesCollectionItems"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
                [key: string]: string;
              }[];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/timeseries/{timeseries_id}": {
    /** gets a single timeseries by id */
    get: {
      parameters: {
        path: {
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Timeseries"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** updates a single timeseries by id */
    put: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      /** @description timeseries payload */
      requestBody: {
        content: {
          "*/*": components["schemas"]["Timeseries"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes a single timeseries by id */
    delete: {
      parameters: {
        query?: {
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/timeseries/{timeseries_id}/inclinometer_measurements": {
    /** lists all measurements for an inclinometer */
    get: {
      parameters: {
        query?: {
          /** @description after timestamp */
          after?: string;
          /** @description before timestamp */
          before?: string;
        };
        path: {
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["InclinometerMeasurementCollection"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes a single inclinometer measurement by timestamp */
    delete: {
      parameters: {
        query: {
          /** @description timestamp of measurement to delete */
          time: string;
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/timeseries/{timeseries_id}/measurements": {
    /** lists timeseries by timeseries uuid */
    get: {
      parameters: {
        query?: {
          /** @description after time */
          after?: string;
          /** @description before time */
          before?: string;
          /** @description downsample threshold */
          threshold?: number;
        };
        path: {
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["MeasurementCollection"];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
    /** deletes a single timeseries measurement by timestamp */
    delete: {
      parameters: {
        query: {
          /** @description timestamp of measurement to delete */
          time: string;
          /** @description api key */
          key?: string;
        };
        path: {
          /** @description timeseries uuid */
          timeseries_id: string;
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": {
              [key: string]: unknown;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/timeseries_measurements": {
    /** creates or updates one or more timeseries measurements */
    post: {
      parameters: {
        query: {
          /** @description api key */
          key: string;
        };
      };
      /** @description array of timeseries measurement collections */
      requestBody: {
        content: {
          "*/*": components["schemas"]["TimeseriesMeasurementCollectionCollection"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["MeasurementCollection"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Not Found */
        404: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
  "/units": {
    /** lists the available units */
    get: {
      responses: {
        /** @description OK */
        200: {
          content: {
            "application/json": components["schemas"]["Unit"][];
          };
        };
        /** @description Bad Request */
        400: {
          content: {
            "application/json": components["schemas"]["echo.HTTPError"];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @example {
     *   "message": "{}"
     * }
     */
    "echo.HTTPError": {
      message?: Record<string, never>;
    };
    /**
     * @example {
     *   "geometries": [
     *     null,
     *     null
     *   ],
     *   "coordinates": "{}",
     *   "type": "type"
     * }
     */
    "geojson.Geometry": {
      coordinates?: Record<string, never>;
      geometries?: components["schemas"]["geojson.Geometry"][];
      type?: string;
    };
    /**
     * @example {
     *   "x": [
     *     0.8008281904610115,
     *     0.8008281904610115
     *   ],
     *   "y": [
     *     6.027456183070403,
     *     6.027456183070403
     *   ],
     *   "z": [
     *     1.4658129805029452,
     *     1.4658129805029452
     *   ]
     * }
     */
    AggregatePlotConfigMeasurementsContourPlot: {
      x?: number[];
      y?: number[];
      z?: number[];
    };
    /**
     * @example {
     *   "instruments": [
     *     {
     *       "instrument_name": "instrument_name",
     *       "instrument_id": "instrument_id"
     *     },
     *     {
     *       "instrument_name": "instrument_name",
     *       "instrument_id": "instrument_id"
     *     }
     *   ],
     *   "read": true,
     *   "alert_config_id": "alert_config_id",
     *   "project_id": "project_id",
     *   "name": "name",
     *   "id": "id",
     *   "body": "body",
     *   "create_date": "create_date",
     *   "project_name": "project_name"
     * }
     */
    Alert: {
      alert_config_id?: string;
      body?: string;
      create_date?: string;
      id?: string;
      instruments?: components["schemas"]["AlertConfigInstrument"][];
      name?: string;
      project_id?: string;
      project_name?: string;
      read?: boolean;
    };
    /**
     * @example {
     *   "updater_username": "updater_username",
     *   "alert_type_id": "alert_type_id",
     *   "creator_username": "creator_username",
     *   "remind_interval": "remind_interval",
     *   "body": "body",
     *   "project_name": "project_name",
     *   "alert_type": "alert_type",
     *   "update_date": "update_date",
     *   "instruments": [
     *     {
     *       "instrument_name": "instrument_name",
     *       "instrument_id": "instrument_id"
     *     },
     *     {
     *       "instrument_name": "instrument_name",
     *       "instrument_id": "instrument_id"
     *     }
     *   ],
     *   "project_id": "project_id",
     *   "last_checked": "last_checked",
     *   "mute_consecutive_alerts": true,
     *   "creator_id": "creator_id",
     *   "last_reminded": "last_reminded",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "schedule_interval": "schedule_interval",
     *   "id": "id",
     *   "alert_email_subscriptions": [
     *     {
     *       "user_type": "user_type",
     *       "id": "id",
     *       "email": "email",
     *       "username": "username"
     *     },
     *     {
     *       "user_type": "user_type",
     *       "id": "id",
     *       "email": "email",
     *       "username": "username"
     *     }
     *   ],
     *   "create_date": "create_date",
     *   "warning_interval": "warning_interval",
     *   "start_date": "start_date"
     * }
     */
    AlertConfig: {
      alert_email_subscriptions?: components["schemas"]["EmailAutocompleteResult"][];
      alert_type?: string;
      alert_type_id?: string;
      body?: string;
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      id?: string;
      instruments?: components["schemas"]["AlertConfigInstrument"][];
      last_checked?: string;
      last_reminded?: string;
      mute_consecutive_alerts?: boolean;
      name?: string;
      project_id?: string;
      project_name?: string;
      remind_interval?: string;
      schedule_interval?: string;
      start_date?: string;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
      warning_interval?: string;
    };
    /**
     * @example {
     *   "instrument_name": "instrument_name",
     *   "instrument_id": "instrument_id"
     * }
     */
    AlertConfigInstrument: {
      instrument_id?: string;
      instrument_name?: string;
    };
    /**
     * @example {
     *   "alert_config_id": "alert_config_id",
     *   "profile_id": "profile_id",
     *   "mute_ui": true,
     *   "id": "id",
     *   "mute_notify": true
     * }
     */
    AlertSubscription: {
      alert_config_id?: string;
      id?: string;
      mute_notify?: boolean;
      mute_ui?: boolean;
      profile_id?: string;
    };
    /**
     * @example {
     *   "id": "id",
     *   "unit_id": "unit_id",
     *   "key": "key",
     *   "parameter_id": "parameter_id"
     * }
     */
    AwareParameter: {
      id?: string;
      key?: string;
      parameter_id?: string;
      unit_id?: string;
    };
    /**
     * @example {
     *   "aware_parameters": {
     *     "key": "aware_parameters"
     *   },
     *   "instrument_id": "instrument_id",
     *   "aware_id": "aware_id"
     * }
     */
    AwarePlatformParameterConfig: {
      aware_id?: string;
      aware_parameters?: {
        [key: string]: string;
      };
      instrument_id?: string;
    };
    /**
     * @example {
     *   "formula_name": "formula_name",
     *   "formula": "formula",
     *   "id": "id",
     *   "instrument_id": "instrument_id",
     *   "unit_id": "unit_id",
     *   "slug": "slug",
     *   "parameter_id": "parameter_id"
     * }
     */
    CalculatedTimeseries: {
      formula?: string;
      formula_name?: string;
      id?: string;
      instrument_id?: string;
      parameter_id?: string;
      slug?: string;
      unit_id?: string;
    };
    /**
     * @example {
     *   "updater_username": "updater_username",
     *   "project_id": "project_id",
     *   "creator_username": "creator_username",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "slug": "slug",
     *   "update_date": "update_date"
     * }
     */
    CollectionGroup: {
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      id?: string;
      name?: string;
      project_id?: string;
      slug?: string;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "updater_username": "updater_username",
     *   "timeseries": [
     *     {
     *       "values": [
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         },
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         }
     *       ],
     *       "instrument": "instrument",
     *       "type": "type",
     *       "instrument_id": "instrument_id",
     *       "unit": "unit",
     *       "parameter": "parameter",
     *       "name": "name",
     *       "variable": "variable",
     *       "latest_value": 0.8008281904610115,
     *       "id": "id",
     *       "instrument_slug": "instrument_slug",
     *       "is_computed": true,
     *       "latest_time": "latest_time",
     *       "unit_id": "unit_id",
     *       "slug": "slug",
     *       "parameter_id": "parameter_id"
     *     },
     *     {
     *       "values": [
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         },
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         }
     *       ],
     *       "instrument": "instrument",
     *       "type": "type",
     *       "instrument_id": "instrument_id",
     *       "unit": "unit",
     *       "parameter": "parameter",
     *       "name": "name",
     *       "variable": "variable",
     *       "latest_value": 0.8008281904610115,
     *       "id": "id",
     *       "instrument_slug": "instrument_slug",
     *       "is_computed": true,
     *       "latest_time": "latest_time",
     *       "unit_id": "unit_id",
     *       "slug": "slug",
     *       "parameter_id": "parameter_id"
     *     }
     *   ],
     *   "project_id": "project_id",
     *   "creator_username": "creator_username",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "slug": "slug",
     *   "update_date": "update_date"
     * }
     */
    CollectionGroupDetails: {
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      id?: string;
      name?: string;
      project_id?: string;
      slug?: string;
      timeseries?: components["schemas"]["collectionGroupDetailsTimeseries"][];
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "updater_username": "updater_username",
     *   "creator_username": "creator_username",
     *   "model_id": "model_id",
     *   "update_date": "update_date",
     *   "tables": [
     *     {
     *       "id": "id",
     *       "table_name": "table_name"
     *     },
     *     {
     *       "id": "id",
     *       "table_name": "table_name"
     *     }
     *   ],
     *   "project_id": "project_id",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "model": "model",
     *   "id": "id",
     *   "sn": "sn",
     *   "create_date": "create_date",
     *   "errors": [
     *     "errors",
     *     "errors"
     *   ],
     *   "slug": "slug"
     * }
     */
    Datalogger: {
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      errors?: string[];
      id?: string;
      model?: string;
      model_id?: string;
      name?: string;
      project_id?: string;
      slug?: string;
      sn?: string;
      tables?: components["schemas"]["DataloggerTable"][];
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "id": "id",
     *   "table_name": "table_name"
     * }
     */
    DataloggerTable: {
      id?: string;
      table_name?: string;
    };
    /**
     * @example {
     *   "preview": {
     *     "bytes": [
     *       0,
     *       0
     *     ],
     *     "status": null
     *   },
     *   "datalogger_table_id": "datalogger_table_id",
     *   "update_date": "update_date"
     * }
     */
    DataloggerTablePreview: {
      datalogger_table_id?: string;
      preview?: components["schemas"]["pgtype.JSON"];
      update_date?: string;
    };
    /**
     * @example {
     *   "updater_username": "updater_username",
     *   "creator_username": "creator_username",
     *   "model_id": "model_id",
     *   "update_date": "update_date",
     *   "tables": [
     *     {
     *       "id": "id",
     *       "table_name": "table_name"
     *     },
     *     {
     *       "id": "id",
     *       "table_name": "table_name"
     *     }
     *   ],
     *   "project_id": "project_id",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "model": "model",
     *   "id": "id",
     *   "sn": "sn",
     *   "create_date": "create_date",
     *   "errors": [
     *     "errors",
     *     "errors"
     *   ],
     *   "key": "key",
     *   "slug": "slug"
     * }
     */
    DataloggerWithKey: {
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      errors?: string[];
      id?: string;
      key?: string;
      model?: string;
      model_id?: string;
      name?: string;
      project_id?: string;
      slug?: string;
      sn?: string;
      tables?: components["schemas"]["DataloggerTable"][];
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "office_id": "office_id",
     *   "agency": "agency",
     *   "initials": "initials",
     *   "division_initials": "division_initials",
     *   "division_name": "division_name",
     *   "name": "name",
     *   "id": "id"
     * }
     */
    District: {
      agency?: string;
      division_initials?: string;
      division_name?: string;
      id?: string;
      initials?: string;
      name?: string;
      office_id?: string;
    };
    /**
     * @example {
     *   "expected_total_submittals": 6,
     *   "office_id": "office_id",
     *   "alert_type_id": "alert_type_id",
     *   "month": "month",
     *   "project_id": "project_id",
     *   "red_submittals": 5,
     *   "green_submittals": 1,
     *   "yellow_submittals": 5,
     *   "actual_total_submittals": 0,
     *   "district_initials": "district_initials",
     *   "project_name": "project_name"
     * }
     */
    DistrictRollup: {
      actual_total_submittals?: number;
      alert_type_id?: string;
      district_initials?: string;
      expected_total_submittals?: number;
      green_submittals?: number;
      month?: string;
      office_id?: string;
      project_id?: string;
      project_name?: string;
      red_submittals?: number;
      yellow_submittals?: number;
    };
    /**
     * @example {
     *   "description": "description",
     *   "id": "id",
     *   "value": "value",
     *   "group": "group"
     * }
     */
    Domain: {
      description?: string;
      group?: string;
      id?: string;
      value?: string;
    };
    DomainGroupOption: {
      description?: string;
      id?: string;
      value?: string;
    };
    DomainMap: {
      [key: string]: components["schemas"]["DomainGroupOption"][];
    };
    /**
     * @example {
     *   "user_type": "user_type",
     *   "id": "id",
     *   "email": "email",
     *   "username": "username"
     * }
     */
    EmailAutocompleteResult: {
      email?: string;
      id?: string;
      user_type?: string;
      username?: string;
    };
    /**
     * @example {
     *   "datalogger_table_id": "datalogger_table_id",
     *   "datalogger_table_name": "datalogger_table_name",
     *   "rows": [
     *     {
     *       "timeseries_id": "timeseries_id",
     *       "id": "id",
     *       "display_name": "display_name",
     *       "instrument_id": "instrument_id",
     *       "field_name": "field_name"
     *     },
     *     {
     *       "timeseries_id": "timeseries_id",
     *       "id": "id",
     *       "display_name": "display_name",
     *       "instrument_id": "instrument_id",
     *       "field_name": "field_name"
     *     }
     *   ],
     *   "datalogger_id": "datalogger_id"
     * }
     */
    EquivalencyTable: {
      datalogger_id?: string;
      datalogger_table_id?: string;
      datalogger_table_name?: string;
      rows?: components["schemas"]["EquivalencyTableRow"][];
    };
    /**
     * @example {
     *   "timeseries_id": "timeseries_id",
     *   "id": "id",
     *   "display_name": "display_name",
     *   "instrument_id": "instrument_id",
     *   "field_name": "field_name"
     * }
     */
    EquivalencyTableRow: {
      display_name?: string;
      field_name?: string;
      id?: string;
      instrument_id?: string;
      timeseries_id?: string;
    };
    /**
     * @example {
     *   "end_date": "end_date",
     *   "updater_username": "updater_username",
     *   "alert_config_id": "alert_config_id",
     *   "creator_username": "creator_username",
     *   "alert_config_name": "alert_config_name",
     *   "body": "body",
     *   "project_name": "project_name",
     *   "submittal_id": "submittal_id",
     *   "update_date": "update_date",
     *   "instruments": [
     *     {
     *       "instrument_name": "instrument_name",
     *       "instrument_id": "instrument_id"
     *     },
     *     {
     *       "instrument_name": "instrument_name",
     *       "instrument_id": "instrument_id"
     *     }
     *   ],
     *   "project_id": "project_id",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "start_date": "start_date"
     * }
     */
    Evaluation: {
      alert_config_id?: string;
      alert_config_name?: string;
      body?: string;
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      end_date?: string;
      id?: string;
      instruments?: components["schemas"]["EvaluationInstrument"][];
      name?: string;
      project_id?: string;
      project_name?: string;
      start_date?: string;
      submittal_id?: string;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "instrument_name": "instrument_name",
     *   "instrument_id": "instrument_id"
     * }
     */
    EvaluationInstrument: {
      instrument_id?: string;
      instrument_name?: string;
    };
    /**
     * @example {
     *   "geometries": [
     *     {
     *       "geometries": [
     *         null,
     *         null
     *       ],
     *       "coordinates": "{}",
     *       "type": "type"
     *     },
     *     {
     *       "geometries": [
     *         null,
     *         null
     *       ],
     *       "coordinates": "{}",
     *       "type": "type"
     *     }
     *   ],
     *   "coordinates": "{}",
     *   "type": "type"
     * }
     */
    Geometry: {
      coordinates?: Record<string, never>;
      geometries?: components["schemas"]["geojson.Geometry"][];
      type?: string;
    };
    /**
     * @example {
     *   "time": "time"
     * }
     */
    Heartbeat: {
      time?: string;
    };
    /**
     * @example {
     *   "new_instruments_7d": 1,
     *   "project_count": 5,
     *   "instrument_group_count": 6,
     *   "new_measurements_2h": 5,
     *   "instrument_count": 0
     * }
     */
    Home: {
      instrument_count?: number;
      instrument_group_count?: number;
      new_instruments_7d?: number;
      new_measurements_2h?: number;
      project_count?: number;
    };
    /**
     * @example {
     *   "name": "name",
     *   "id": "id",
     *   "slug": "slug"
     * }
     */
    IDSlugName: {
      id?: string;
      name?: string;
      slug?: string;
    };
    /**
     * @example {
     *   "creator": "creator",
     *   "values": [
     *     0,
     *     0
     *   ],
     *   "time": "time",
     *   "create_date": "create_date"
     * }
     */
    InclinometerMeasurement: {
      create_date?: string;
      creator?: string;
      time?: string;
      values?: number[];
    };
    /**
     * @example {
     *   "timeseries_id": "timeseries_id",
     *   "inclinometers": [
     *     {
     *       "creator": "creator",
     *       "values": [
     *         0,
     *         0
     *       ],
     *       "time": "time",
     *       "create_date": "create_date"
     *     },
     *     {
     *       "creator": "creator",
     *       "values": [
     *         0,
     *         0
     *       ],
     *       "time": "time",
     *       "create_date": "create_date"
     *     }
     *   ]
     * }
     */
    InclinometerMeasurementCollection: {
      inclinometers?: components["schemas"]["InclinometerMeasurement"][];
      timeseries_id?: string;
    };
    /**
     * @example {
     *   "items": [
     *     {
     *       "timeseries_id": "timeseries_id",
     *       "inclinometers": [
     *         {
     *           "creator": "creator",
     *           "values": [
     *             0,
     *             0
     *           ],
     *           "time": "time",
     *           "create_date": "create_date"
     *         },
     *         {
     *           "creator": "creator",
     *           "values": [
     *             0,
     *             0
     *           ],
     *           "time": "time",
     *           "create_date": "create_date"
     *         }
     *       ]
     *     },
     *     {
     *       "timeseries_id": "timeseries_id",
     *       "inclinometers": [
     *         {
     *           "creator": "creator",
     *           "values": [
     *             0,
     *             0
     *           ],
     *           "time": "time",
     *           "create_date": "create_date"
     *         },
     *         {
     *           "creator": "creator",
     *           "values": [
     *             0,
     *             0
     *           ],
     *           "time": "time",
     *           "create_date": "create_date"
     *         }
     *       ]
     *     }
     *   ]
     * }
     */
    InclinometerMeasurementCollectionCollection: {
      items?: components["schemas"]["InclinometerMeasurementCollection"][];
    };
    /**
     * @example {
     *   "timeseries_id": "timeseries_id",
     *   "items": [
     *     null,
     *     null
     *   ]
     * }
     */
    InclinometerMeasurementCollectionLean: {
      items?: components["schemas"]["InclinometerMeasurementLean"][];
      timeseries_id?: string;
    };
    InclinometerMeasurementLean: {
      [key: string]: number[];
    };
    /**
     * @example {
     *   "has_cwms": true,
     *   "projects": [
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     },
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     }
     *   ],
     *   "alert_configs": [
     *     "alert_configs",
     *     "alert_configs"
     *   ],
     *   "icon": "icon",
     *   "type": "type",
     *   "aware_id": "aware_id",
     *   "status_id": "status_id",
     *   "opts": {
     *     "key": ""
     *   },
     *   "station": 6,
     *   "constants": [
     *     "constants",
     *     "constants"
     *   ],
     *   "id": "id",
     *   "status_time": "status_time",
     *   "create_date": "create_date",
     *   "slug": "slug",
     *   "updater_username": "updater_username",
     *   "offset": 0,
     *   "creator_username": "creator_username",
     *   "type_id": "type_id",
     *   "show_cwms_tab": true,
     *   "usgs_id": "usgs_id",
     *   "groups": [
     *     "groups",
     *     "groups"
     *   ],
     *   "update_date": "update_date",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "geometry": {
     *     "geometries": [
     *       {
     *         "geometries": [
     *           null,
     *           null
     *         ],
     *         "coordinates": "{}",
     *         "type": "type"
     *       },
     *       {
     *         "geometries": [
     *           null,
     *           null
     *         ],
     *         "coordinates": "{}",
     *         "type": "type"
     *       }
     *     ],
     *     "coordinates": "{}",
     *     "type": "type"
     *   },
     *   "nid_id": "nid_id",
     *   "status": "status"
     * }
     */
    Instrument: {
      alert_configs?: string[];
      aware_id?: string;
      constants?: string[];
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      geometry?: components["schemas"]["Geometry"];
      groups?: string[];
      has_cwms?: boolean;
      icon?: string;
      id?: string;
      name?: string;
      nid_id?: string;
      offset?: number;
      opts?: {
        [key: string]: unknown;
      };
      projects?: components["schemas"]["IDSlugName"][];
      show_cwms_tab?: boolean;
      slug?: string;
      station?: number;
      status?: string;
      status_id?: string;
      status_time?: string;
      type?: string;
      type_id?: string;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
      usgs_id?: string;
    };
    /**
     * @example {
     *   "instrument_count": 0
     * }
     */
    InstrumentCount: {
      instrument_count?: number;
    };
    /**
     * @example {
     *   "updater_username": "updater_username",
     *   "creator_username": "creator_username",
     *   "description": "description",
     *   "instrument_count": 0,
     *   "update_date": "update_date",
     *   "project_id": "project_id",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "timeseries_count": 6,
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "slug": "slug"
     * }
     */
    InstrumentGroup: {
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      description?: string;
      id?: string;
      instrument_count?: number;
      name?: string;
      project_id?: string;
      slug?: string;
      timeseries_count?: number;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "updater_username": "updater_username",
     *   "creator_username": "creator_username",
     *   "creator_id": "creator_id",
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "time": "time",
     *   "body": "body",
     *   "create_date": "create_date",
     *   "title": "title",
     *   "instrument_id": "instrument_id",
     *   "update_date": "update_date"
     * }
     */
    InstrumentNote: {
      body?: string;
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      id?: string;
      instrument_id?: string;
      time?: string;
      title?: string;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "items": [
     *     {
     *       "updater_username": "updater_username",
     *       "creator_username": "creator_username",
     *       "creator_id": "creator_id",
     *       "updater_id": "updater_id",
     *       "id": "id",
     *       "time": "time",
     *       "body": "body",
     *       "create_date": "create_date",
     *       "title": "title",
     *       "instrument_id": "instrument_id",
     *       "update_date": "update_date"
     *     },
     *     {
     *       "updater_username": "updater_username",
     *       "creator_username": "creator_username",
     *       "creator_id": "creator_id",
     *       "updater_id": "updater_id",
     *       "id": "id",
     *       "time": "time",
     *       "body": "body",
     *       "create_date": "create_date",
     *       "title": "title",
     *       "instrument_id": "instrument_id",
     *       "update_date": "update_date"
     *     }
     *   ]
     * }
     */
    InstrumentNoteCollection: {
      items?: components["schemas"]["InstrumentNote"][];
    };
    /**
     * @example {
     *   "project_ids": [
     *     "project_ids",
     *     "project_ids"
     *   ]
     * }
     */
    InstrumentProjectAssignments: {
      project_ids?: string[];
    };
    /**
     * @example {
     *   "status_id": "status_id",
     *   "id": "id",
     *   "time": "time",
     *   "status": "status"
     * }
     */
    InstrumentStatus: {
      id?: string;
      status?: string;
      status_id?: string;
      time?: string;
    };
    /**
     * @example {
     *   "items": [
     *     {
     *       "status_id": "status_id",
     *       "id": "id",
     *       "time": "time",
     *       "status": "status"
     *     },
     *     {
     *       "status_id": "status_id",
     *       "id": "id",
     *       "time": "time",
     *       "status": "status"
     *     }
     *   ]
     * }
     */
    InstrumentStatusCollection: {
      items?: components["schemas"]["InstrumentStatus"][];
    };
    /**
     * @example {
     *   "is_valid": true,
     *   "errors": [
     *     "errors",
     *     "errors"
     *   ]
     * }
     */
    InstrumentsValidation: {
      errors?: string[];
      is_valid?: boolean;
    };
    /**
     * @example {
     *   "time": "time",
     *   "measurements": [
     *     {
     *       "elevation": 6.027456183070403,
     *       "temp": 5.637376656633329,
     *       "inc_dev": 1.4658129805029452,
     *       "tilt": 2.3021358869347655,
     *       "segment_id": 5,
     *       "cum_dev": 0.8008281904610115
     *     },
     *     {
     *       "elevation": 6.027456183070403,
     *       "temp": 5.637376656633329,
     *       "inc_dev": 1.4658129805029452,
     *       "tilt": 2.3021358869347655,
     *       "segment_id": 5,
     *       "cum_dev": 0.8008281904610115
     *     }
     *   ]
     * }
     */
    IpiMeasurements: {
      measurements?: components["schemas"]["IpiSegmentMeasurement"][];
      time?: string;
    };
    /**
     * @example {
     *   "temp_timeseries_id": "temp_timeseries_id",
     *   "length": 6.027456183070403,
     *   "tilt_timeseries_id": "tilt_timeseries_id",
     *   "id": 0,
     *   "inc_dev_timeseries_id": "inc_dev_timeseries_id",
     *   "instrument_id": "instrument_id",
     *   "length_timeseries_id": "length_timeseries_id"
     * }
     */
    IpiSegment: {
      id?: number;
      inc_dev_timeseries_id?: string;
      instrument_id?: string;
      length?: number;
      length_timeseries_id?: string;
      temp_timeseries_id?: string;
      tilt_timeseries_id?: string;
    };
    /**
     * @example {
     *   "elevation": 6.027456183070403,
     *   "temp": 5.637376656633329,
     *   "inc_dev": 1.4658129805029452,
     *   "tilt": 2.3021358869347655,
     *   "segment_id": 5,
     *   "cum_dev": 0.8008281904610115
     * }
     */
    IpiSegmentMeasurement: {
      cum_dev?: number;
      elevation?: number;
      inc_dev?: number;
      segment_id?: number;
      temp?: number;
      tilt?: number;
    };
    /**
     * @example {
     *   "annotation": "annotation",
     *   "validated": true,
     *   "masked": true,
     *   "time": "time",
     *   "error": "error",
     *   "value": 0.8008281904610115
     * }
     */
    Measurement: {
      annotation?: string;
      error?: string;
      masked?: boolean;
      time?: string;
      validated?: boolean;
      value?: number;
    };
    /**
     * @example {
     *   "timeseries_id": "timeseries_id",
     *   "items": [
     *     {
     *       "annotation": "annotation",
     *       "validated": true,
     *       "masked": true,
     *       "time": "time",
     *       "error": "error",
     *       "value": 0.8008281904610115
     *     },
     *     {
     *       "annotation": "annotation",
     *       "validated": true,
     *       "masked": true,
     *       "time": "time",
     *       "error": "error",
     *       "value": 0.8008281904610115
     *     }
     *   ]
     * }
     */
    MeasurementCollection: {
      items?: components["schemas"]["Measurement"][];
      timeseries_id?: string;
    };
    /**
     * @example {
     *   "timeseries_id": "timeseries_id",
     *   "items": [
     *     null,
     *     null
     *   ]
     * }
     */
    MeasurementCollectionLean: {
      items?: components["schemas"]["MeasurementLean"][];
      timeseries_id?: string;
    };
    MeasurementLean: {
      [key: string]: number;
    };
    Opts: {
      [key: string]: unknown;
    };
    /**
     * @example {
     *   "date_range": "date_range",
     *   "updater_username": "updater_username",
     *   "creator_username": "creator_username",
     *   "display": {
     *     "key": ""
     *   },
     *   "show_comments": true,
     *   "report_configs": [
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     },
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     }
     *   ],
     *   "auto_range": true,
     *   "show_masked": true,
     *   "threshold": 0,
     *   "update_date": "update_date",
     *   "show_nonvalidated": true,
     *   "project_id": "project_id",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "plot_type": "plot_type",
     *   "slug": "slug"
     * }
     */
    PlotConfig: {
      auto_range?: boolean;
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      date_range?: string;
      display?: {
        [key: string]: unknown;
      };
      id?: string;
      name?: string;
      plot_type?: string;
      project_id?: string;
      report_configs?: components["schemas"]["IDSlugName"][];
      show_comments?: boolean;
      show_masked?: boolean;
      show_nonvalidated?: boolean;
      slug?: string;
      threshold?: number;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "date_range": "date_range",
     *   "updater_username": "updater_username",
     *   "creator_username": "creator_username",
     *   "display": {
     *     "y_axis_timeseries_id": "y_axis_timeseries_id",
     *     "x_axis_timeseries_id": "x_axis_timeseries_id"
     *   },
     *   "show_comments": true,
     *   "report_configs": [
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     },
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     }
     *   ],
     *   "auto_range": true,
     *   "show_masked": true,
     *   "threshold": 0,
     *   "update_date": "update_date",
     *   "show_nonvalidated": true,
     *   "project_id": "project_id",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "plot_type": "plot_type",
     *   "slug": "slug"
     * }
     */
    PlotConfigBullseyePlot: {
      auto_range?: boolean;
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      date_range?: string;
      display?: components["schemas"]["PlotConfigBullseyePlotDisplay"];
      id?: string;
      name?: string;
      plot_type?: string;
      project_id?: string;
      report_configs?: components["schemas"]["IDSlugName"][];
      show_comments?: boolean;
      show_masked?: boolean;
      show_nonvalidated?: boolean;
      slug?: string;
      threshold?: number;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "y_axis_timeseries_id": "y_axis_timeseries_id",
     *   "x_axis_timeseries_id": "x_axis_timeseries_id"
     * }
     */
    PlotConfigBullseyePlotDisplay: {
      x_axis_timeseries_id?: string;
      y_axis_timeseries_id?: string;
    };
    /**
     * @example {
     *   "date_range": "date_range",
     *   "updater_username": "updater_username",
     *   "creator_username": "creator_username",
     *   "display": {
     *     "contour_smoothing": true,
     *     "gradient_smoothing": true,
     *     "locf_backfill": "locf_backfill",
     *     "timeseries_ids": [
     *       "timeseries_ids",
     *       "timeseries_ids"
     *     ],
     *     "show_labels": true,
     *     "time": "time"
     *   },
     *   "show_comments": true,
     *   "report_configs": [
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     },
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     }
     *   ],
     *   "auto_range": true,
     *   "show_masked": true,
     *   "threshold": 0,
     *   "update_date": "update_date",
     *   "show_nonvalidated": true,
     *   "project_id": "project_id",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "plot_type": "plot_type",
     *   "slug": "slug"
     * }
     */
    PlotConfigContourPlot: {
      auto_range?: boolean;
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      date_range?: string;
      display?: components["schemas"]["PlotConfigContourPlotDisplay"];
      id?: string;
      name?: string;
      plot_type?: string;
      project_id?: string;
      report_configs?: components["schemas"]["IDSlugName"][];
      show_comments?: boolean;
      show_masked?: boolean;
      show_nonvalidated?: boolean;
      slug?: string;
      threshold?: number;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "contour_smoothing": true,
     *   "gradient_smoothing": true,
     *   "locf_backfill": "locf_backfill",
     *   "timeseries_ids": [
     *     "timeseries_ids",
     *     "timeseries_ids"
     *   ],
     *   "show_labels": true,
     *   "time": "time"
     * }
     */
    PlotConfigContourPlotDisplay: {
      contour_smoothing?: boolean;
      gradient_smoothing?: boolean;
      locf_backfill?: string;
      show_labels?: boolean;
      time?: string;
      timeseries_ids?: string[];
    };
    /**
     * @example {
     *   "x": 0.8008281904610115,
     *   "y": 6.027456183070403,
     *   "time": "time"
     * }
     */
    PlotConfigMeasurementBullseyePlot: {
      time?: string;
      x?: number;
      y?: number;
    };
    /**
     * @example {
     *   "date_range": "date_range",
     *   "updater_username": "updater_username",
     *   "creator_username": "creator_username",
     *   "display": {
     *     "instrument_type": "instrument_type",
     *     "instrument_id": "instrument_id"
     *   },
     *   "show_comments": true,
     *   "report_configs": [
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     },
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     }
     *   ],
     *   "auto_range": true,
     *   "show_masked": true,
     *   "threshold": 0,
     *   "update_date": "update_date",
     *   "show_nonvalidated": true,
     *   "project_id": "project_id",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "plot_type": "plot_type",
     *   "slug": "slug"
     * }
     */
    PlotConfigProfilePlot: {
      auto_range?: boolean;
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      date_range?: string;
      display?: components["schemas"]["PlotConfigProfilePlotDisplay"];
      id?: string;
      name?: string;
      plot_type?: string;
      project_id?: string;
      report_configs?: components["schemas"]["IDSlugName"][];
      show_comments?: boolean;
      show_masked?: boolean;
      show_nonvalidated?: boolean;
      slug?: string;
      threshold?: number;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "instrument_type": "instrument_type",
     *   "instrument_id": "instrument_id"
     * }
     */
    PlotConfigProfilePlotDisplay: {
      instrument_id?: string;
      instrument_type?: string;
    };
    /**
     * @example {
     *   "color": "color",
     *   "data_point": 0.8008281904610115,
     *   "name": "name",
     *   "plot_configuration_id": "plot_configuration_id",
     *   "enabled": true
     * }
     */
    PlotConfigScatterLineCustomShape: {
      color?: string;
      data_point?: number;
      enabled?: boolean;
      name?: string;
      plot_configuration_id?: string;
    };
    /**
     * @example {
     *   "layout": {
     *     "custom_shapes": [
     *       {
     *         "color": "color",
     *         "data_point": 0.8008281904610115,
     *         "name": "name",
     *         "plot_configuration_id": "plot_configuration_id",
     *         "enabled": true
     *       },
     *       {
     *         "color": "color",
     *         "data_point": 0.8008281904610115,
     *         "name": "name",
     *         "plot_configuration_id": "plot_configuration_id",
     *         "enabled": true
     *       }
     *     ],
     *     "y_axis_title": "y_axis_title",
     *     "y2_axis_title": "y2_axis_title"
     *   },
     *   "traces": [
     *     {
     *       "trace_type": "trace_type",
     *       "color": "color",
     *       "show_markers": true,
     *       "timeseries_id": "timeseries_id",
     *       "y_axis": "y_axis",
     *       "parameter": "parameter",
     *       "name": "name",
     *       "width": 1.4658129805029452,
     *       "line_style": "line_style",
     *       "plot_configuration_id": "plot_configuration_id",
     *       "trace_order": 6
     *     },
     *     {
     *       "trace_type": "trace_type",
     *       "color": "color",
     *       "show_markers": true,
     *       "timeseries_id": "timeseries_id",
     *       "y_axis": "y_axis",
     *       "parameter": "parameter",
     *       "name": "name",
     *       "width": 1.4658129805029452,
     *       "line_style": "line_style",
     *       "plot_configuration_id": "plot_configuration_id",
     *       "trace_order": 6
     *     }
     *   ]
     * }
     */
    PlotConfigScatterLineDisplay: {
      layout?: components["schemas"]["PlotConfigScatterLineLayout"];
      traces?: components["schemas"]["PlotConfigScatterLineTimeseriesTrace"][];
    };
    /**
     * @example {
     *   "custom_shapes": [
     *     {
     *       "color": "color",
     *       "data_point": 0.8008281904610115,
     *       "name": "name",
     *       "plot_configuration_id": "plot_configuration_id",
     *       "enabled": true
     *     },
     *     {
     *       "color": "color",
     *       "data_point": 0.8008281904610115,
     *       "name": "name",
     *       "plot_configuration_id": "plot_configuration_id",
     *       "enabled": true
     *     }
     *   ],
     *   "y_axis_title": "y_axis_title",
     *   "y2_axis_title": "y2_axis_title"
     * }
     */
    PlotConfigScatterLineLayout: {
      custom_shapes?: components["schemas"]["PlotConfigScatterLineCustomShape"][];
      y2_axis_title?: string;
      y_axis_title?: string;
    };
    /**
     * @example {
     *   "date_range": "date_range",
     *   "updater_username": "updater_username",
     *   "creator_username": "creator_username",
     *   "display": {
     *     "layout": {
     *       "custom_shapes": [
     *         {
     *           "color": "color",
     *           "data_point": 0.8008281904610115,
     *           "name": "name",
     *           "plot_configuration_id": "plot_configuration_id",
     *           "enabled": true
     *         },
     *         {
     *           "color": "color",
     *           "data_point": 0.8008281904610115,
     *           "name": "name",
     *           "plot_configuration_id": "plot_configuration_id",
     *           "enabled": true
     *         }
     *       ],
     *       "y_axis_title": "y_axis_title",
     *       "y2_axis_title": "y2_axis_title"
     *     },
     *     "traces": [
     *       {
     *         "trace_type": "trace_type",
     *         "color": "color",
     *         "show_markers": true,
     *         "timeseries_id": "timeseries_id",
     *         "y_axis": "y_axis",
     *         "parameter": "parameter",
     *         "name": "name",
     *         "width": 1.4658129805029452,
     *         "line_style": "line_style",
     *         "plot_configuration_id": "plot_configuration_id",
     *         "trace_order": 6
     *       },
     *       {
     *         "trace_type": "trace_type",
     *         "color": "color",
     *         "show_markers": true,
     *         "timeseries_id": "timeseries_id",
     *         "y_axis": "y_axis",
     *         "parameter": "parameter",
     *         "name": "name",
     *         "width": 1.4658129805029452,
     *         "line_style": "line_style",
     *         "plot_configuration_id": "plot_configuration_id",
     *         "trace_order": 6
     *       }
     *     ]
     *   },
     *   "show_comments": true,
     *   "report_configs": [
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     },
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     }
     *   ],
     *   "auto_range": true,
     *   "show_masked": true,
     *   "threshold": 5,
     *   "update_date": "update_date",
     *   "show_nonvalidated": true,
     *   "project_id": "project_id",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "plot_type": "plot_type",
     *   "slug": "slug"
     * }
     */
    PlotConfigScatterLinePlot: {
      auto_range?: boolean;
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      date_range?: string;
      display?: components["schemas"]["PlotConfigScatterLineDisplay"];
      id?: string;
      name?: string;
      plot_type?: string;
      project_id?: string;
      report_configs?: components["schemas"]["IDSlugName"][];
      show_comments?: boolean;
      show_masked?: boolean;
      show_nonvalidated?: boolean;
      slug?: string;
      threshold?: number;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "trace_type": "trace_type",
     *   "color": "color",
     *   "show_markers": true,
     *   "timeseries_id": "timeseries_id",
     *   "y_axis": "y_axis",
     *   "parameter": "parameter",
     *   "name": "name",
     *   "width": 1.4658129805029452,
     *   "line_style": "line_style",
     *   "plot_configuration_id": "plot_configuration_id",
     *   "trace_order": 6
     * }
     */
    PlotConfigScatterLineTimeseriesTrace: {
      color?: string;
      line_style?: string;
      /** @description read-only */
      name?: string;
      /** @description read-only */
      parameter?: string;
      plot_configuration_id?: string;
      show_markers?: boolean;
      timeseries_id?: string;
      trace_order?: number;
      trace_type?: string;
      width?: number;
      /** @description y1 or y2, default y1 */
      y_axis?: string;
    };
    /**
     * @example {
     *   "is_admin": true,
     *   "roles": [
     *     "roles",
     *     "roles"
     *   ],
     *   "tokens": [
     *     {
     *       "token_id": "token_id",
     *       "issued": "issued"
     *     },
     *     {
     *       "token_id": "token_id",
     *       "issued": "issued"
     *     }
     *   ],
     *   "id": "id",
     *   "display_name": "display_name",
     *   "email": "email",
     *   "username": "username"
     * }
     */
    Profile: {
      display_name?: string;
      email?: string;
      id?: string;
      is_admin?: boolean;
      roles?: string[];
      tokens?: components["schemas"]["TokenInfoProfile"][];
      username?: string;
    };
    /**
     * @example {
     *   "image": "image",
     *   "updater_username": "updater_username",
     *   "federal_id": "federal_id",
     *   "creator_username": "creator_username",
     *   "instrument_count": 0,
     *   "update_date": "update_date",
     *   "office_id": "office_id",
     *   "instrument_group_count": 6,
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "district_id": "district_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "slug": "slug"
     * }
     */
    Project: {
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      district_id?: string;
      federal_id?: string;
      id?: string;
      image?: string;
      instrument_count?: number;
      instrument_group_count?: number;
      name?: string;
      office_id?: string;
      slug?: string;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "project_count": 0
     * }
     */
    ProjectCount: {
      project_count?: number;
    };
    /**
     * @example {
     *   "instrument_ids": [
     *     "instrument_ids",
     *     "instrument_ids"
     *   ]
     * }
     */
    ProjectInstrumentAssignments: {
      instrument_ids?: string[];
    };
    /**
     * @example {
     *   "role": "role",
     *   "role_id": "role_id",
     *   "profile_id": "profile_id",
     *   "id": "id",
     *   "email": "email",
     *   "username": "username"
     * }
     */
    ProjectMembership: {
      email?: string;
      id?: string;
      profile_id?: string;
      role?: string;
      role_id?: string;
      username?: string;
    };
    /**
     * @example {
     *   "updater_username": "updater_username",
     *   "creator_username": "creator_username",
     *   "global_overrides": {
     *     "date_range": {
     *       "value": "value",
     *       "enabled": true
     *     },
     *     "show_nonvalidated": {
     *       "value": true,
     *       "enabled": true
     *     },
     *     "show_masked": {
     *       "value": true,
     *       "enabled": true
     *     }
     *   },
     *   "description": "description",
     *   "project_name": "project_name",
     *   "update_date": "update_date",
     *   "district_name": "district_name",
     *   "project_id": "project_id",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "plot_configs": [
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     },
     *     {
     *       "name": "name",
     *       "id": "id",
     *       "slug": "slug"
     *     }
     *   ],
     *   "slug": "slug"
     * }
     */
    ReportConfig: {
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      description?: string;
      district_name?: string;
      global_overrides?: components["schemas"]["ReportConfigGlobalOverrides"];
      id?: string;
      name?: string;
      plot_configs?: components["schemas"]["IDSlugName"][];
      project_id?: string;
      project_name?: string;
      slug?: string;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "date_range": {
     *     "value": "value",
     *     "enabled": true
     *   },
     *   "show_nonvalidated": {
     *     "value": true,
     *     "enabled": true
     *   },
     *   "show_masked": {
     *     "value": true,
     *     "enabled": true
     *   }
     * }
     */
    ReportConfigGlobalOverrides: {
      date_range?: components["schemas"]["TextOption"];
      show_masked?: components["schemas"]["ToggleOption"];
      show_nonvalidated?: components["schemas"]["ToggleOption"];
    };
    /**
     * @example {
     *   "updater_username": "updater_username",
     *   "creator_username": "creator_username",
     *   "global_overrides": {
     *     "date_range": {
     *       "value": "value",
     *       "enabled": true
     *     },
     *     "show_nonvalidated": {
     *       "value": true,
     *       "enabled": true
     *     },
     *     "show_masked": {
     *       "value": true,
     *       "enabled": true
     *     }
     *   },
     *   "description": "description",
     *   "project_name": "project_name",
     *   "update_date": "update_date",
     *   "district_name": "district_name",
     *   "project_id": "project_id",
     *   "creator_id": "creator_id",
     *   "name": "name",
     *   "updater_id": "updater_id",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "plot_configs": [
     *     {
     *       "date_range": "date_range",
     *       "updater_username": "updater_username",
     *       "creator_username": "creator_username",
     *       "display": {
     *         "layout": {
     *           "custom_shapes": [
     *             {
     *               "color": "color",
     *               "data_point": 0.8008281904610115,
     *               "name": "name",
     *               "plot_configuration_id": "plot_configuration_id",
     *               "enabled": true
     *             },
     *             {
     *               "color": "color",
     *               "data_point": 0.8008281904610115,
     *               "name": "name",
     *               "plot_configuration_id": "plot_configuration_id",
     *               "enabled": true
     *             }
     *           ],
     *           "y_axis_title": "y_axis_title",
     *           "y2_axis_title": "y2_axis_title"
     *         },
     *         "traces": [
     *           {
     *             "trace_type": "trace_type",
     *             "color": "color",
     *             "show_markers": true,
     *             "timeseries_id": "timeseries_id",
     *             "y_axis": "y_axis",
     *             "parameter": "parameter",
     *             "name": "name",
     *             "width": 1.4658129805029452,
     *             "line_style": "line_style",
     *             "plot_configuration_id": "plot_configuration_id",
     *             "trace_order": 6
     *           },
     *           {
     *             "trace_type": "trace_type",
     *             "color": "color",
     *             "show_markers": true,
     *             "timeseries_id": "timeseries_id",
     *             "y_axis": "y_axis",
     *             "parameter": "parameter",
     *             "name": "name",
     *             "width": 1.4658129805029452,
     *             "line_style": "line_style",
     *             "plot_configuration_id": "plot_configuration_id",
     *             "trace_order": 6
     *           }
     *         ]
     *       },
     *       "show_comments": true,
     *       "report_configs": [
     *         {
     *           "name": "name",
     *           "id": "id",
     *           "slug": "slug"
     *         },
     *         {
     *           "name": "name",
     *           "id": "id",
     *           "slug": "slug"
     *         }
     *       ],
     *       "auto_range": true,
     *       "show_masked": true,
     *       "threshold": 5,
     *       "update_date": "update_date",
     *       "show_nonvalidated": true,
     *       "project_id": "project_id",
     *       "creator_id": "creator_id",
     *       "name": "name",
     *       "updater_id": "updater_id",
     *       "id": "id",
     *       "create_date": "create_date",
     *       "plot_type": "plot_type",
     *       "slug": "slug"
     *     },
     *     {
     *       "date_range": "date_range",
     *       "updater_username": "updater_username",
     *       "creator_username": "creator_username",
     *       "display": {
     *         "layout": {
     *           "custom_shapes": [
     *             {
     *               "color": "color",
     *               "data_point": 0.8008281904610115,
     *               "name": "name",
     *               "plot_configuration_id": "plot_configuration_id",
     *               "enabled": true
     *             },
     *             {
     *               "color": "color",
     *               "data_point": 0.8008281904610115,
     *               "name": "name",
     *               "plot_configuration_id": "plot_configuration_id",
     *               "enabled": true
     *             }
     *           ],
     *           "y_axis_title": "y_axis_title",
     *           "y2_axis_title": "y2_axis_title"
     *         },
     *         "traces": [
     *           {
     *             "trace_type": "trace_type",
     *             "color": "color",
     *             "show_markers": true,
     *             "timeseries_id": "timeseries_id",
     *             "y_axis": "y_axis",
     *             "parameter": "parameter",
     *             "name": "name",
     *             "width": 1.4658129805029452,
     *             "line_style": "line_style",
     *             "plot_configuration_id": "plot_configuration_id",
     *             "trace_order": 6
     *           },
     *           {
     *             "trace_type": "trace_type",
     *             "color": "color",
     *             "show_markers": true,
     *             "timeseries_id": "timeseries_id",
     *             "y_axis": "y_axis",
     *             "parameter": "parameter",
     *             "name": "name",
     *             "width": 1.4658129805029452,
     *             "line_style": "line_style",
     *             "plot_configuration_id": "plot_configuration_id",
     *             "trace_order": 6
     *           }
     *         ]
     *       },
     *       "show_comments": true,
     *       "report_configs": [
     *         {
     *           "name": "name",
     *           "id": "id",
     *           "slug": "slug"
     *         },
     *         {
     *           "name": "name",
     *           "id": "id",
     *           "slug": "slug"
     *         }
     *       ],
     *       "auto_range": true,
     *       "show_masked": true,
     *       "threshold": 5,
     *       "update_date": "update_date",
     *       "show_nonvalidated": true,
     *       "project_id": "project_id",
     *       "creator_id": "creator_id",
     *       "name": "name",
     *       "updater_id": "updater_id",
     *       "id": "id",
     *       "create_date": "create_date",
     *       "plot_type": "plot_type",
     *       "slug": "slug"
     *     }
     *   ],
     *   "slug": "slug"
     * }
     */
    ReportConfigWithPlotConfigs: {
      create_date?: string;
      creator_id?: string;
      creator_username?: string;
      description?: string;
      district_name?: string;
      global_overrides?: components["schemas"]["ReportConfigGlobalOverrides"];
      id?: string;
      name?: string;
      plot_configs?: components["schemas"]["PlotConfigScatterLinePlot"][];
      project_id?: string;
      project_name?: string;
      slug?: string;
      update_date?: string;
      updater_id?: string;
      updater_username?: string;
    };
    /**
     * @example {
     *   "file_key": "file_key",
     *   "creator": "creator",
     *   "progress_update_date": "progress_update_date",
     *   "report_config_id": "report_config_id",
     *   "progress": 0,
     *   "file_expiry": "file_expiry",
     *   "id": "id",
     *   "create_date": "create_date",
     *   "status": "status"
     * }
     */
    ReportDownloadJob: {
      create_date?: string;
      creator?: string;
      file_expiry?: string;
      file_key?: string;
      id?: string;
      progress?: number;
      progress_update_date?: string;
      report_config_id?: string;
      status?: string;
    };
    /**
     * @example {
     *   "time": "time",
     *   "measurements": [
     *     {
     *       "elevation": 0.8008281904610115,
     *       "temp": 1.4658129805029452,
     *       "z_cum_dev": 1.2315135367772556,
     *       "y_increment": 4.145608029883936,
     *       "x_cum_dev": 7.061401241503109,
     *       "temp_increment": 5.637376656633329,
     *       "z_increment": 1.0246457001441578,
     *       "y_cum_dev": 2.027123023002322,
     *       "x_increment": 9.301444243932576,
     *       "x": 2.3021358869347655,
     *       "y": 3.616076749251911,
     *       "z": 7.386281948385884,
     *       "segment_id": 6,
     *       "temp_cum_dev": 5.962133916683182
     *     },
     *     {
     *       "elevation": 0.8008281904610115,
     *       "temp": 1.4658129805029452,
     *       "z_cum_dev": 1.2315135367772556,
     *       "y_increment": 4.145608029883936,
     *       "x_cum_dev": 7.061401241503109,
     *       "temp_increment": 5.637376656633329,
     *       "z_increment": 1.0246457001441578,
     *       "y_cum_dev": 2.027123023002322,
     *       "x_increment": 9.301444243932576,
     *       "x": 2.3021358869347655,
     *       "y": 3.616076749251911,
     *       "z": 7.386281948385884,
     *       "segment_id": 6,
     *       "temp_cum_dev": 5.962133916683182
     *     }
     *   ]
     * }
     */
    SaaMeasurements: {
      measurements?: components["schemas"]["SaaSegmentMeasurement"][];
      time?: string;
    };
    /**
     * @example {
     *   "z_timeseries_id": "z_timeseries_id",
     *   "temp_timeseries_id": "temp_timeseries_id",
     *   "y_timeseries_id": "y_timeseries_id",
     *   "x_timeseries_id": "x_timeseries_id",
     *   "length": 6.027456183070403,
     *   "id": 0,
     *   "instrument_id": "instrument_id",
     *   "length_timeseries_id": "length_timeseries_id"
     * }
     */
    SaaSegment: {
      id?: number;
      instrument_id?: string;
      length?: number;
      length_timeseries_id?: string;
      temp_timeseries_id?: string;
      x_timeseries_id?: string;
      y_timeseries_id?: string;
      z_timeseries_id?: string;
    };
    /**
     * @example {
     *   "elevation": 0.8008281904610115,
     *   "temp": 1.4658129805029452,
     *   "z_cum_dev": 1.2315135367772556,
     *   "y_increment": 4.145608029883936,
     *   "x_cum_dev": 7.061401241503109,
     *   "temp_increment": 5.637376656633329,
     *   "z_increment": 1.0246457001441578,
     *   "y_cum_dev": 2.027123023002322,
     *   "x_increment": 9.301444243932576,
     *   "x": 2.3021358869347655,
     *   "y": 3.616076749251911,
     *   "z": 7.386281948385884,
     *   "segment_id": 6,
     *   "temp_cum_dev": 5.962133916683182
     * }
     */
    SaaSegmentMeasurement: {
      elevation?: number;
      segment_id?: number;
      temp?: number;
      temp_cum_dev?: number;
      temp_increment?: number;
      x?: number;
      x_cum_dev?: number;
      x_increment?: number;
      y?: number;
      y_cum_dev?: number;
      y_increment?: number;
      z?: number;
      z_cum_dev?: number;
      z_increment?: number;
    };
    /**
     * @example {
     *   "item": "{}",
     *   "id": "id",
     *   "type": "type"
     * }
     */
    SearchResult: {
      id?: string;
      item?: Record<string, never>;
      type?: string;
    };
    Site: {
      description?: string;
      elevation?: string;
      elevationUnits?: string;
      siteName?: components["schemas"]["SiteName"];
    };
    SiteName: {
      id?: string;
      nameType?: string;
    };
    /**
     * @example {
     *   "alert_type_id": "alert_type_id",
     *   "alert_config_id": "alert_config_id",
     *   "due_date": "due_date",
     *   "alert_config_name": "alert_config_name",
     *   "submittal_status_id": "submittal_status_id",
     *   "submittal_status_name": "submittal_status_name",
     *   "warning_sent": true,
     *   "project_id": "project_id",
     *   "alert_type_name": "alert_type_name",
     *   "marked_as_missing": true,
     *   "completion_date": "completion_date",
     *   "id": "id",
     *   "create_date": "create_date"
     * }
     */
    Submittal: {
      alert_config_id?: string;
      alert_config_name?: string;
      alert_type_id?: string;
      alert_type_name?: string;
      completion_date?: string;
      create_date?: string;
      due_date?: string;
      id?: string;
      marked_as_missing?: boolean;
      project_id?: string;
      submittal_status_id?: string;
      submittal_status_name?: string;
      warning_sent?: boolean;
    };
    /**
     * @example {
     *   "value": "value",
     *   "enabled": true
     * }
     */
    TextOption: {
      enabled?: boolean;
      value?: string;
    };
    /**
     * @example {
     *   "values": [
     *     {
     *       "annotation": "annotation",
     *       "validated": true,
     *       "masked": true,
     *       "time": "time",
     *       "error": "error",
     *       "value": 0.8008281904610115
     *     },
     *     {
     *       "annotation": "annotation",
     *       "validated": true,
     *       "masked": true,
     *       "time": "time",
     *       "error": "error",
     *       "value": 0.8008281904610115
     *     }
     *   ],
     *   "instrument": "instrument",
     *   "type": "type",
     *   "instrument_id": "instrument_id",
     *   "unit": "unit",
     *   "parameter": "parameter",
     *   "name": "name",
     *   "variable": "variable",
     *   "id": "id",
     *   "instrument_slug": "instrument_slug",
     *   "is_computed": true,
     *   "unit_id": "unit_id",
     *   "slug": "slug",
     *   "parameter_id": "parameter_id"
     * }
     */
    Timeseries: {
      id?: string;
      instrument?: string;
      instrument_id?: string;
      instrument_slug?: string;
      is_computed?: boolean;
      name?: string;
      parameter?: string;
      parameter_id?: string;
      slug?: string;
      type?: string;
      unit?: string;
      unit_id?: string;
      values?: components["schemas"]["Measurement"][];
      variable?: string;
    };
    /**
     * @example {
     *   "items": [
     *     {
     *       "values": [
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         },
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         }
     *       ],
     *       "instrument": "instrument",
     *       "type": "type",
     *       "instrument_id": "instrument_id",
     *       "unit": "unit",
     *       "parameter": "parameter",
     *       "name": "name",
     *       "variable": "variable",
     *       "id": "id",
     *       "instrument_slug": "instrument_slug",
     *       "is_computed": true,
     *       "unit_id": "unit_id",
     *       "slug": "slug",
     *       "parameter_id": "parameter_id"
     *     },
     *     {
     *       "values": [
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         },
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         }
     *       ],
     *       "instrument": "instrument",
     *       "type": "type",
     *       "instrument_id": "instrument_id",
     *       "unit": "unit",
     *       "parameter": "parameter",
     *       "name": "name",
     *       "variable": "variable",
     *       "id": "id",
     *       "instrument_slug": "instrument_slug",
     *       "is_computed": true,
     *       "unit_id": "unit_id",
     *       "slug": "slug",
     *       "parameter_id": "parameter_id"
     *     }
     *   ]
     * }
     */
    TimeseriesCollectionItems: {
      items?: components["schemas"]["Timeseries"][];
    };
    /**
     * @example {
     *   "cwms_office_id": "cwms_office_id",
     *   "values": [
     *     {
     *       "annotation": "annotation",
     *       "validated": true,
     *       "masked": true,
     *       "time": "time",
     *       "error": "error",
     *       "value": 0.8008281904610115
     *     },
     *     {
     *       "annotation": "annotation",
     *       "validated": true,
     *       "masked": true,
     *       "time": "time",
     *       "error": "error",
     *       "value": 0.8008281904610115
     *     }
     *   ],
     *   "instrument": "instrument",
     *   "cwms_extent_earliest_time": "cwms_extent_earliest_time",
     *   "type": "type",
     *   "cwms_timeseries_id": "cwms_timeseries_id",
     *   "instrument_id": "instrument_id",
     *   "unit": "unit",
     *   "parameter": "parameter",
     *   "cwms_extent_latest_time": "cwms_extent_latest_time",
     *   "name": "name",
     *   "variable": "variable",
     *   "id": "id",
     *   "instrument_slug": "instrument_slug",
     *   "is_computed": true,
     *   "unit_id": "unit_id",
     *   "slug": "slug",
     *   "parameter_id": "parameter_id"
     * }
     */
    TimeseriesCwms: {
      cwms_extent_earliest_time?: string;
      cwms_extent_latest_time?: string;
      cwms_office_id?: string;
      cwms_timeseries_id?: string;
      id?: string;
      instrument?: string;
      instrument_id?: string;
      instrument_slug?: string;
      is_computed?: boolean;
      name?: string;
      parameter?: string;
      parameter_id?: string;
      slug?: string;
      type?: string;
      unit?: string;
      unit_id?: string;
      values?: components["schemas"]["Measurement"][];
      variable?: string;
    };
    /**
     * @example {
     *   "items": [
     *     {
     *       "timeseries_id": "timeseries_id",
     *       "items": [
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         },
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         }
     *       ]
     *     },
     *     {
     *       "timeseries_id": "timeseries_id",
     *       "items": [
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         },
     *         {
     *           "annotation": "annotation",
     *           "validated": true,
     *           "masked": true,
     *           "time": "time",
     *           "error": "error",
     *           "value": 0.8008281904610115
     *         }
     *       ]
     *     }
     *   ]
     * }
     */
    TimeseriesMeasurementCollectionCollection: {
      items?: components["schemas"]["MeasurementCollection"][];
    };
    /**
     * @example {
     *   "value": true,
     *   "enabled": true
     * }
     */
    ToggleOption: {
      enabled?: boolean;
      value?: boolean;
    };
    /**
     * @example {
     *   "token_id": "token_id",
     *   "profile_id": "profile_id",
     *   "issued": "issued",
     *   "secret_token": "secret_token"
     * }
     */
    Token: {
      issued?: string;
      profile_id?: string;
      secret_token?: string;
      token_id?: string;
    };
    /**
     * @example {
     *   "token_id": "token_id",
     *   "issued": "issued"
     * }
     */
    TokenInfoProfile: {
      issued?: string;
      token_id?: string;
    };
    /**
     * @example {
     *   "measure": "measure",
     *   "unit_family_id": "unit_family_id",
     *   "name": "name",
     *   "unit_family": "unit_family",
     *   "id": "id",
     *   "abbreviation": "abbreviation",
     *   "measure_id": "measure_id"
     * }
     */
    Unit: {
      abbreviation?: string;
      id?: string;
      measure?: string;
      measure_id?: string;
      name?: string;
      unit_family?: string;
      unit_family_id?: string;
    };
    /**
     * @example {
     *   "values": [
     *     {
     *       "annotation": "annotation",
     *       "validated": true,
     *       "masked": true,
     *       "time": "time",
     *       "error": "error",
     *       "value": 0.8008281904610115
     *     },
     *     {
     *       "annotation": "annotation",
     *       "validated": true,
     *       "masked": true,
     *       "time": "time",
     *       "error": "error",
     *       "value": 0.8008281904610115
     *     }
     *   ],
     *   "instrument": "instrument",
     *   "type": "type",
     *   "instrument_id": "instrument_id",
     *   "unit": "unit",
     *   "parameter": "parameter",
     *   "name": "name",
     *   "variable": "variable",
     *   "latest_value": 0.8008281904610115,
     *   "id": "id",
     *   "instrument_slug": "instrument_slug",
     *   "is_computed": true,
     *   "latest_time": "latest_time",
     *   "unit_id": "unit_id",
     *   "slug": "slug",
     *   "parameter_id": "parameter_id"
     * }
     */
    collectionGroupDetailsTimeseries: {
      id?: string;
      instrument?: string;
      instrument_id?: string;
      instrument_slug?: string;
      is_computed?: boolean;
      latest_time?: string;
      latest_value?: number;
      name?: string;
      parameter?: string;
      parameter_id?: string;
      slug?: string;
      type?: string;
      unit?: string;
      unit_id?: string;
      values?: components["schemas"]["Measurement"][];
      variable?: string;
    };
    /**
     * @example {
     *   "bytes": [
     *     0,
     *     0
     *   ],
     *   "status": null
     * }
     */
    "pgtype.JSON": {
      bytes?: number[];
      status?: components["schemas"]["pgtype.Status"];
    };
    /** @enum {integer} */
    "pgtype.Status": 0 | 1 | 2;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
